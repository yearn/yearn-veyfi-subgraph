
type Transaction @entity {
  "Transaction hash + Log Index"
  id: ID!
  "Log index related to the event. A Transaction might contain multiple events."
  logIndex: BigInt!
  "The event name / call stacktrace"
  event: String!
  "The transaction sender"
  from: Bytes!
  "Gas price used in the transaction"
  gasPrice: BigInt!
  "Gas limit used in the transaction"
  gasLimit: BigInt!
  "Transaction hash"
  hash: Bytes!
  "The transaction index"
  index: BigInt!
  "Address that received the transaction"
  to: Bytes!
  "Ether value sent in the transaction"
  value: BigInt!
  "Timestamp when the transaction was executed"
  timestamp: BigInt!
  "Gas limit used in the current block"
  blockGasLimit: BigInt!
  "Block number"
  blockNumber: BigInt!
}

type Token @entity {
  id: ID!
  decimals: Int!
  name: String!
  symbol: String!
}

type VeYFIStat @entity {
  id: ID!
  totalSupply: BigInt!
  totalPenalties: BigInt!
  yfi: Bytes!
  veYFI: Bytes!
  rewardPool: Bytes!
}

type Account @entity {
  id: ID!
  wallet: Bytes!
  lock: Lock
  lockUpdates: [LockUpdate!]! @derivedFrom(field: "account")
}

type Lock @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  createdAt: Transaction!
  account: Account!
  veAmount: BigInt!
  startLock: BigInt!
  endLock: BigInt!
}

type LockUpdate @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  createdAt: Transaction!
  account: Account!
  # tokenAmount: BigInt!
  veTokenAmount: BigInt!
  startLock: BigInt!
  endLock: BigInt!
}
